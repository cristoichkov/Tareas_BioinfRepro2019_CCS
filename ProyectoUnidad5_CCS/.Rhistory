install.packages("devtools")
library(devtools)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("devtools")
library(devtools)
install_github("heibl/rpg")
install.packages("adephylo")
install.packages("spdep")
install.packages("spdep")
install.packages("sf")
install.packages("sf")
install_github("heibl/rpg")
install.packages("adephylo")
install_github("heibl/rpg")
install.packages("phangorn")
install_github("heibl/rpg")
install.packages("useful")
install_github("heibl/rpg")
install.packages("munsell")
install_github("heibl/rpg")
install.packages("rpg")
install_github("heibl/rpg")
install.packages("zoo")
install_github("heibl/rpg")
install.packages("cowplot")
install_github("heibl/rpg")
library("rpg", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
install_github("heibl/rpg")
detach("package:rpg", unload=TRUE)
remove.packages(rpg)
remove.packages("rpg")
install_github("heibl/rpg")
install_github("heibl/rpg")
df = data.frame(matrix(rnorm(20), nrow=10))
df
runif(30, min=18, max=50)
?runif
round(runif(30, min=18, max=50), digits = 2)
round(runif(30, min=18, max=50), digits = 0)
vec <- round(runif(50, min=18, max=50), digits = 0)
vec <- as.data.frame(round(runif(50, min=18, max=50), digits = 0))
View(vec)
ls(vec)
colnames(vec)[colnames(round(runif(50, min = 18, max = 50), digits = 0))=="old_name"] <- "edad"
View(vec)
colnames(vec)[colnames(vec), digits = 0))=="round(runif(50, min = 18, max = 50), digits = 0)"] <- "edad"
colnames(vec)[colnames(vec)=="round(runif(50, min = 18, max = 50), digits = 0)"] <- "Edad"
View(vec)
boxplot(vec$Edad)
## Only run this example in interactive R sessions
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
# DataTables example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris)
}
)
}
library(shiny)
runApp('Escritorio')
Stops_and_stations <- data.frame(
Type = rep(c("Bike", "Muni", "Bus", "BART"), each = 10),
stop_lon = -runif(40, 122.4200, 122.4500),
stop_lat = runif(40, 37.76800, 37.78900),
color = rep(c("Red", "Blue", "Green", "Yellow"), each = 10)
)
View(Stops_and_stations)
library(shiny)
library(ggplot2)
library(ape)
library(dplyr)
library(raster)
library(shinydashboard)
library(plotly)
library(leaflet)
library(SNPRelate)
runApp('Escritorio')
runApp('Escritorio')
setwd("~/Dropbox/Bioinformatica/Tareas_BioinfRepro2019_CCS/ProyectoUnidad5_CCS")
runApp('~/Escritorio')
runApp('~/Escritorio')
runApp('~/Escritorio')
runApp('~/Escritorio')
output$mymap <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(tab_corn) %>% addTiles() %>%
fitBounds(~min(Longitud), ~min(Latitud), ~max(Longitud), ~max(Latitud))
})
